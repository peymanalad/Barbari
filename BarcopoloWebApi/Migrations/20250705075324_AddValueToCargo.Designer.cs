// <auto-generated />
using System;
using BarcopoloWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarcopoloWebApi.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250705075324_AddValueToCargo")]
    partial class AddValueToCargo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BarcopoloWebApi.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Bargir", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("MaxCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("Bargirs");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Cargo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CargoTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("NeedsPackaging")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PackageCount")
                        .HasColumnType("int");

                    b.Property<string>("PackagingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CargoTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.CargoImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CargoId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("CargoImages");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.CargoType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CargoTypes");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasViolations")
                        .HasColumnType("bit");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LicenseIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseIssuePlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("SmartCardCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CollectorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeclaredValue")
                        .HasColumnType("decimal(18,0)");

                    b.Property<long?>("DelivererId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<long?>("FinalReceiverId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Insurance")
                        .HasColumnType("decimal(18,0)");

                    b.Property<bool>("IsInsuranceRequested")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LoadingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginAddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,0)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CollectorId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("FinalReceiverId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OriginAddressId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrderEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChangedByPersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByPersonId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderEvents");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrderVehicle", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("OrderVehicles");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("OrganizationWalletId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationWalletId")
                        .IsUnique()
                        .HasFilter("[OrganizationWalletId] IS NOT NULL");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrganizationCargoType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CargoTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CargoTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationCargoTypes");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrganizationMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("OrganizationMemberships");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("PersonalWalletId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalWalletId")
                        .IsUnique()
                        .HasFilter("[PersonalWalletId] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.SmsCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestCount")
                        .HasColumnType("int");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.SubOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchWalletId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BranchWalletId")
                        .IsUnique()
                        .HasFilter("[BranchWalletId] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("SubOrganizations");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("MobileModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RefreshTokenExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("TokenExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Axles")
                        .HasColumnType("int");

                    b.Property<string>("Chassis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasViolations")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBroken")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVan")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlateIranCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PlateLetter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PlateThreeDigit")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("PlateTwoDigit")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("SmartCardCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("VanCommission")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WalletTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PerformedByPersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByPersonId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncomePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InternalTelephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCargoValueMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDriverNetMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcessCostMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoadingMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParkingCostMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStampCostMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWarehousingMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaybillFareMandatory")
                        .HasColumnType("bit");

                    b.Property<decimal>("ManagerPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerCargoInsurance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PrintText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("ReceiptIssuingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TerminalPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnloadingPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WarehouseVehicle", b =>
                {
                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("WarehouseId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("WarehouseVehicles");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WithdrawalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequesterPersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReviewedByAdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceWalletId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequesterPersonId");

                    b.HasIndex("ReviewedByAdminId");

                    b.HasIndex("SourceWalletId");

                    b.ToTable("WithdrawalRequests");
                });

            modelBuilder.Entity("FrequentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("FullAddress", "PersonId", "OrganizationId", "BranchId");

                    b.ToTable("FrequentAddresses");
                });

            modelBuilder.Entity("Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("OwnerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerType", "OwnerId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Address", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.SubOrganization", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Bargir", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Vehicle", "Vehicle")
                        .WithOne("Bargir")
                        .HasForeignKey("BarcopoloWebApi.Entities.Bargir", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Cargo", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.CargoType", "CargoType")
                        .WithMany()
                        .HasForeignKey("CargoTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Order", "Order")
                        .WithMany("Cargos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Owner")
                        .WithMany("OwnedCargos")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoType");

                    b.Navigation("Order");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.CargoImage", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Cargo", "Cargo")
                        .WithMany("Images")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Driver", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Person", "Person")
                        .WithOne("Driver")
                        .HasForeignKey("BarcopoloWebApi.Entities.Driver", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Feedback", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("BarcopoloWebApi.Entities.Feedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Order", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.SubOrganization", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId");

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BarcopoloWebApi.Entities.Person", "FinalReceiver")
                        .WithMany()
                        .HasForeignKey("FinalReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany("Orders")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("BarcopoloWebApi.Entities.Address", "OriginAddress")
                        .WithMany()
                        .HasForeignKey("OriginAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Owner")
                        .WithMany("OwnedOrders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Collector");

                    b.Navigation("Deliverer");

                    b.Navigation("FinalReceiver");

                    b.Navigation("Organization");

                    b.Navigation("OriginAddress");

                    b.Navigation("Owner");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrderEvent", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Person", "ChangedByPerson")
                        .WithMany("ChangedOrderEvents")
                        .HasForeignKey("ChangedByPersonId");

                    b.HasOne("BarcopoloWebApi.Entities.Order", "Order")
                        .WithMany("Events")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByPerson");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrderVehicle", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Order", "Order")
                        .WithMany("OrderVehicles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Vehicle", "Vehicle")
                        .WithMany("OrderVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Organization", b =>
                {
                    b.HasOne("Wallet", "OrganizationWallet")
                        .WithOne("OwnerOrganization")
                        .HasForeignKey("BarcopoloWebApi.Entities.Organization", "OrganizationWalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrganizationWallet");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrganizationCargoType", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.CargoType", "CargoType")
                        .WithMany()
                        .HasForeignKey("CargoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany("AllowedCargoTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CargoType");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.OrganizationMembership", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.SubOrganization", "Branch")
                        .WithMany("Memberships")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany("Memberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Person")
                        .WithMany("Memberships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Payment", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Person", b =>
                {
                    b.HasOne("Wallet", "PersonalWallet")
                        .WithOne("OwnerPerson")
                        .HasForeignKey("BarcopoloWebApi.Entities.Person", "PersonalWalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PersonalWallet");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.SubOrganization", b =>
                {
                    b.HasOne("Wallet", "BranchWallet")
                        .WithOne("OwnerBranch")
                        .HasForeignKey("BarcopoloWebApi.Entities.SubOrganization", "BranchWalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany("Branches")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchWallet");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.UserToken", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Person", "Person")
                        .WithMany("UserTokens")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Vehicle", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WalletTransaction", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Person", "PerformedByPerson")
                        .WithMany()
                        .HasForeignKey("PerformedByPersonId");

                    b.HasOne("Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByPerson");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Warehouse", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WarehouseVehicle", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Vehicle", "Vehicle")
                        .WithMany("WarehouseVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseVehicles")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.Person", "RequesterPerson")
                        .WithMany()
                        .HasForeignKey("RequesterPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarcopoloWebApi.Entities.Person", "ReviewedByAdmin")
                        .WithMany()
                        .HasForeignKey("ReviewedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wallet", "SourceWallet")
                        .WithMany()
                        .HasForeignKey("SourceWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequesterPerson");

                    b.Navigation("ReviewedByAdmin");

                    b.Navigation("SourceWallet");
                });

            modelBuilder.Entity("FrequentAddress", b =>
                {
                    b.HasOne("BarcopoloWebApi.Entities.SubOrganization", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BarcopoloWebApi.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BarcopoloWebApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Cargo", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Driver", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Order", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("Events");

                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("OrderVehicles");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Organization", b =>
                {
                    b.Navigation("AllowedCargoTypes");

                    b.Navigation("Branches");

                    b.Navigation("Memberships");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ChangedOrderEvents");

                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Memberships");

                    b.Navigation("OwnedCargos");

                    b.Navigation("OwnedOrders");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.SubOrganization", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Vehicle", b =>
                {
                    b.Navigation("Bargir")
                        .IsRequired();

                    b.Navigation("OrderVehicles");

                    b.Navigation("WarehouseVehicles");
                });

            modelBuilder.Entity("BarcopoloWebApi.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseVehicles");
                });

            modelBuilder.Entity("Wallet", b =>
                {
                    b.Navigation("OwnerBranch");

                    b.Navigation("OwnerOrganization");

                    b.Navigation("OwnerPerson");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
